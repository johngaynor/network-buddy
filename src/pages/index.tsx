import Head from "next/head";
// import Link from "next/link";
import { SignOutButton } from "@clerk/nextjs";
import { type NextPage } from "next";
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table";
import { DateTime } from "luxon";

import { api } from "~/utils/api";

type Occupation = {
  company: string;
  position: string;
  updatedAt: Date;
};

type Contact = {
  name: string;
  affiliation: string;
  occupation: Occupation[];
  last_interaction: Date;
  interaction_title: string;
  opportunities: string | null;
};

const defaultData: Contact[] = [
  {
    name: "Zach Canterbury",
    affiliation: "Mutual classes @ IUPUI",
    occupation: [
      {
        company: "IUPUI",
        position: "student",
        updatedAt: new Date(2025, 7, 22),
      },
      {
        company: "SECOND",
        position: "TEST",
        updatedAt: new Date(2024, 7, 22),
      },
    ],
    last_interaction: new Date(2023, 7, 22),
    interaction_title: "Coffee at Patachou",
    opportunities: null,
  },
];

const columnHelper = createColumnHelper<Contact>();

const columns = [
  columnHelper.accessor("name", {
    header: () => "Name",
    cell: (info) => info.getValue(),
    size: 120,
    maxSize: 150,
  }),
  columnHelper.accessor("affiliation", {
    header: () => "Affiliation",
    cell: (i) => i.renderValue(),
  }),
  columnHelper.accessor("occupation", {
    header: () => "Occupation",
    cell: (info) => {
      const occupations = info.getValue() as Occupation[];
      if (occupations.length === 0) {
        return ""; // Handle case when there are no occupations
      }

      const sorted = occupations.sort(
        (a, b) => b.updatedAt.getTime() - a.updatedAt.getTime(),
      );
      // Get the most recent occupation (the first one after sorting)
      const recent = sorted[0];
      // Return the company and position of the most recent occupation
      return `${recent?.company}, ${recent?.position}`;
    },
  }),
  columnHelper.accessor("last_interaction", {
    header: () => "Last Interaction",
    cell: (i) => {
      const val = i.getValue() as Date;
      const valObj = DateTime.fromJSDate(val).toFormat("MM/dd/yyyy");
      return valObj;
    },
    size: 70,
  }),
  columnHelper.accessor("interaction_title", {
    header: "Event",
  }),
  columnHelper.accessor("opportunities", {
    header: "Opportunities",
    cell: (info) => {
      const val = info.getValue() as string;
      const maxLength = 35;
      const truncatedVal =
        val && val.length > maxLength
          ? val.substring(0, maxLength) + "..."
          : val;
      return truncatedVal;
    },
  }),
];

const Home: NextPage = () => {
  const { data } = api.contacts.getAll.useQuery();
  console.log(data);

  const table = useReactTable({
    data: defaultData,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <>
      <Head>
        <title>Network Buddy</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        {/* <SignOutButton /> */}
        <table className="w-11/12 bg-white">
          <thead className="">
            {table.getHeaderGroups().map((headerGroup) => (
              <tr key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <th key={header.id} className="border-2 bg-red-300 text-left">
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext(),
                        )}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody>
            {table.getRowModel().rows.map((row) => (
              <tr key={row.id}>
                {row.getVisibleCells().map((cell) => (
                  <td key={cell.id} style={{ width: cell.column.getSize() }}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </main>
    </>
  );
};

export default Home;
