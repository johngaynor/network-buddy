import Head from "next/head";
import { SignOutButton } from "@clerk/nextjs";
import { type NextPage } from "next";
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
  getSortedRowModel,
} from "@tanstack/react-table";
import { DateTime } from "luxon";
import { useUser } from "@clerk/nextjs";
import { IconDefinition, faHouse } from "@fortawesome/free-solid-svg-icons";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faBars,
  faFilter,
  faUserPlus,
  faEllipsis,
  faMagnifyingGlass,
  faCaretDown,
} from "@fortawesome/free-solid-svg-icons";

import { api } from "~/utils/api";

type Highlight = {
  highlight: string;
};

type Interaction = {
  title: string;
  location: string;
  date: Date;
  Highlights: Highlight[];
};

type Contact = {
  name: string;
  affiliation: string;
  notes: string;
  position: string;
  company: string;
  Interactions: Interaction[];
};

const columnHelper = createColumnHelper<Contact>();

const columns = [
  columnHelper.accessor("name", {
    header: () => "NAME",
    id: "name",
    cell: (info) => info.getValue(),
    size: 150,
  }),
  columnHelper.accessor("affiliation", {
    header: () => "AFFILIATION",
    cell: (info) => info.renderValue(),
  }),
  columnHelper.accessor("position", {
    header: () => "POSITION",
    cell: (info) => info.renderValue(),
  }),
  columnHelper.accessor("company", {
    header: () => "COMPANY",
    cell: (info) => info.renderValue(),
  }),
  // columnHelper.accessor("notes", {
  //   header: "Notes",
  //   cell: (info) => {
  //     const val = info.getValue();
  //     const maxLength = 35;
  //     const truncatedVal =
  //       val && val.length > maxLength
  //         ? val.substring(0, maxLength) + "..."
  //         : val;
  //     return truncatedVal;
  //   },
  // }),
  columnHelper.accessor("Interactions", {
    header: () => "RECENT ACTIVITY",
    cell: (info) => {
      const interactions = info.getValue();
      if (interactions.length === 0) {
        return "--"; // Handle case when there are no interactions
      }

      const sorted = interactions.sort(
        (a, b) => b.date.getTime() - a.date.getTime(),
      );
      const recent = sorted[0];
      return recent?.title;
    },
    size: 90,
  }),
  columnHelper.accessor("Interactions", {
    header: () => "ACTIVITY DATE",
    id: "activity_date",
    cell: (info) => {
      const interactions = info.getValue();
      if (interactions.length === 0) {
        return "--"; // Handle case when there are no interactions
      }

      const sorted = interactions.sort(
        (a, b) => b.date.getTime() - a.date.getTime(),
      );
      const recent = sorted[0];
      const convertedDate = DateTime.fromJSDate(
        recent?.date ?? new Date(),
      ).toFormat("MMMM dd, yyyy");
      return `${convertedDate}`;
    },
    size: 90,
  }),
];

const Home: NextPage = () => {
  const { data, isLoading } = api.contacts.getAll.useQuery();

  const table = useReactTable({
    data: data ?? [],
    columns,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    initialState: {
      sorting: [
        // {
        //   id: "activity_date",
        //   desc: false,
        // },
        {
          id: "name",
          desc: true,
        },
      ],
    },
  });

  if (isLoading) return "Loading...";

  if (!data || !table) return "No data available";

  const NavIcon = ({ icon }: { icon: IconDefinition }) => {
    return (
      <div className="flex h-14 w-14 items-center justify-center text-[#8099a7] transition delay-100 ease-in-out hover:bg-[#f1eefd] hover:text-[#5e40f1]">
        <FontAwesomeIcon
          icon={icon}
          style={{ height: "20px", width: "20px" }}
        />
      </div>
    );
  };

  return (
    <>
      <Head>
        <title>Network Buddy</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center justify-center bg-gradient-to-bl from-[#4ba5f8] to-[#7153f5] p-10">
        <div className="flex h-full w-full flex-row rounded-lg bg-white">
          <div className="flex w-14 flex-col items-center">
            <NavIcon icon={faBars} />
            <NavIcon icon={faBars} />
          </div>
          <div className="flex w-full flex-col">
            <div className="flex h-14 w-full items-center rounded-lg bg-white px-6 text-[#8099a7]">
              <div className="flex w-1/6 items-center">
                <FontAwesomeIcon
                  icon={faMagnifyingGlass}
                  style={{ height: "20px", width: "20px" }}
                />
                <p className="ml-3 text-sm text-[#b5bfc3]">
                  Type in to Search...
                </p>
              </div>
              <div className="flex w-2/3 justify-center">
                <FontAwesomeIcon
                  icon={faHouse}
                  style={{ height: "20px", width: "20px" }}
                />
              </div>
              <div className="flex w-1/6 items-center justify-end">
                <div className="h-8 w-8 rounded-full border-2 border-[#4ca8f6]"></div>
                <FontAwesomeIcon
                  icon={faCaretDown}
                  style={{ height: "20px", width: "20px", marginLeft: "10px" }}
                />
              </div>
            </div>
            <div className="flex flex-grow flex-col rounded-br-lg bg-gray-100 p-6">
              <div className="flex h-16 justify-between">
                <div className="flex w-1/3 items-center justify-between">
                  <p className="text-3xl text-[#5e40f1]">Contacts</p>
                  <p className="-ml-20 text-sm text-[#b5bfc3]">14,323 Total</p>
                  <p className="text-sm text-[#b5bfc3]">
                    Sort by:{" "}
                    <span className="text-[#828586]">Date Created</span>
                  </p>
                </div>
                <div className="flex w-1/3 items-center justify-end">
                  <div className="hover:text-text-[#4ca8f6] flex h-10 w-10 items-center justify-center rounded-md bg-white text-[#8099a7] transition ease-in-out hover:bg-[#ddf1fb] hover:text-[#4ca8f6]">
                    <FontAwesomeIcon
                      icon={faBars}
                      style={{ height: "20px", width: "20px" }}
                    />
                  </div>
                  <div className="mx-1 flex h-10 w-20 items-center justify-evenly rounded-md bg-white text-sm text-[#8099a7] transition ease-in-out hover:bg-[#ddf1fb] hover:text-[#4ca8f6]">
                    <p>Filter</p>
                    <FontAwesomeIcon
                      icon={faFilter}
                      style={{ height: "20px", width: "20px" }}
                    />
                  </div>
                  <div className="flex h-10 w-36 items-center justify-evenly rounded-md bg-[#4ca8f6] text-sm text-white">
                    <FontAwesomeIcon
                      icon={faUserPlus}
                      style={{ height: "20px", width: "20px" }}
                    />
                    <p>Add Contact</p>
                  </div>
                  <div className="mx-1 flex h-10 w-10 items-center justify-center rounded-md bg-[#ddf1fb] text-[#4ca8f6] transition ease-in-out hover:bg-[#4ca8f6] hover:text-white">
                    <FontAwesomeIcon
                      icon={faEllipsis}
                      style={{ height: "20px", width: "20px" }}
                    />
                  </div>
                </div>
              </div>

              <table className="mt-5">
                <thead className="">
                  {table.getHeaderGroups().map((headerGroup, i) => (
                    <tr key={headerGroup.id + i}>
                      {headerGroup.headers.map((header, i) => (
                        <th
                          key={header.id + i}
                          // className="text-left text-sm text-[#b5bfc3]"
                          className={`px-3 text-left text-sm text-[#b5bfc3] ${i === 0 ? "pl-10" : null}`}
                        >
                          {header.isPlaceholder
                            ? null
                            : flexRender(
                                header.column.columnDef.header,
                                header.getContext(),
                              )}
                        </th>
                      ))}
                    </tr>
                  ))}
                </thead>
                <tbody>
                  {table.getRowModel().rows.map((row, i) => (
                    <tr
                      key={row.id + i}
                      className="h-12 rounded-xl border-y-8 border-gray-100 bg-white text-[#999]"
                    >
                      {row.getVisibleCells().map((cell, i) => (
                        <td
                          key={cell.id + i}
                          style={{ width: cell.column.getSize() }}
                          // className="rounded-xl p-3"
                          className={`p-3 ${i === 0 ? "pl-10" : null}`}
                        >
                          {flexRender(
                            cell.column.columnDef.cell,
                            cell.getContext(),
                          )}
                        </td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
        {/* <SignOutButton /> */}
      </main>
    </>
  );
};

export default Home;
