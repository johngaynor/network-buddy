import Head from "next/head";
import { type ReactNode, useEffect, useState } from "react";
import {
  type IconDefinition,
  faUserPlus,
  faPowerOff,
  faXmark,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faBars,
  faCaretDown,
  faUserGroup,
} from "@fortawesome/free-solid-svg-icons";
import { Inter } from "next/font/google";
import { api } from "~/utils/api";
import { useSetContacts, useSetContactsLoading } from "~/store/AppStore";
import toast from "react-hot-toast";
import { useRouter } from "next/navigation";
import { SignOutButton } from "@clerk/nextjs";
import { useUser } from "@clerk/nextjs";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-sans",
});

export default function Layout({ children }: { children: ReactNode }) {
  const [navOpen, setNavOpen] = useState<boolean>(false);
  const setContacts = useSetContacts();
  const setContactsLoading = useSetContactsLoading();
  const router = useRouter();
  const {
    data: contacts,
    isLoading: contactsLoading,
    error: contactsError,
  } = api.contacts.getAll.useQuery();

  useEffect(() => {
    if (contacts) {
      setContacts(contacts);
    }
    setContactsLoading(contactsLoading);
  }, [contacts, setContacts]);

  if (contactsError)
    toast.error("Error retrieving contacts, please try again later!");

  const session = useUser();
  const username = session.user?.fullName;

  const NavIcon = (props: {
    icon: IconDefinition;
    openOnClick?: boolean;
    title: string;
    link?: string;
    isLogout?: boolean;
  }) => {
    const button = () => {
      return (
        <div
          className={`flex h-14 items-center overflow-x-hidden text-[#8099a7] transition ease-in-out ${props.isLogout ? "hover:bg-red-200 hover:text-red-500" : "hover:bg-site-purple-l hover:text-site-purple-r"}
        ${navOpen ? "w-56" : "w-14"} ${props.openOnClick ? "rounded-tl-xl" : ""}
        `}
          onClick={() =>
            props.openOnClick
              ? setNavOpen(!navOpen)
              : props.link
                ? router.push(props.link)
                : null
          }
        >
          <div className="absolute flex h-14 w-14 items-center justify-center">
            <FontAwesomeIcon
              icon={props.icon}
              style={{ height: "20px", width: "20px" }}
            />
          </div>
          {navOpen && <p className="pl-14">{props.title}</p>}
        </div>
      );
    };

    if (!props.isLogout) {
      return button();
    } else return <SignOutButton>{button()}</SignOutButton>;
  };

  return (
    <>
      <Head>
        <title>Network Buddy</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`flex h-screen flex-col items-center justify-center bg-gradient-to-bl from-site-blue-r to-site-purple-r font-sans md:p-5 ${inter.variable}`}
      >
        <div className="flex h-full w-full flex-row bg-white md:rounded-lg">
          {/* start desktop nav */}
          <div
            className={` hidden flex-col transition-all delay-100 ease-in-out lg:flex ${navOpen ? "w-56" : "w-14"}`}
          >
            <NavIcon icon={faBars} openOnClick={true} title="Settings" />
            <NavIcon icon={faUserGroup} title="Contacts" link="/contacts" />
            <NavIcon
              icon={faUserPlus}
              title="Add Contact"
              link="/contact/new"
            />
            <NavIcon icon={faPowerOff} title="Logout" isLogout={true} />
          </div>
          {/* end desktop nav */}
          <div className="flex w-full flex-col">
            <div className="flex min-h-14 w-full items-center rounded-r-lg px-6 text-[#8099a7]">
              <div className="flex w-1/6 items-center"></div>
              <div
                className="pointer flex w-2/3 cursor-pointer justify-center hover:text-site-purple-r"
                onClick={() => router.push("/")}
              >
                <p className="xs:text-3xl bg-gradient-to-bl from-site-blue-r to-site-purple-r bg-clip-text text-xl font-semibold text-transparent">
                  NETWORK BUDDY
                </p>
              </div>
              <div className="flex w-1/6 items-center justify-end">
                {/* <div className="h-8 w-8 rounded-full border-2 border-[#4ca8f6]"></div>
                <FontAwesomeIcon
                  icon={faCaretDown}
                  style={{ height: "20px", width: "20px", marginLeft: "10px" }}
                /> */}
                <p className="hidden lg:block">{username}</p>
                <div className="lg:hidden" onClick={() => setNavOpen(!navOpen)}>
                  <FontAwesomeIcon
                    icon={navOpen ? faXmark : faBars}
                    style={{ height: "20px", width: "20px" }}
                  />
                </div>
              </div>
            </div>
            <div
              className={`${navOpen ? "flex lg:hidden" : "hidden"} flex-col items-center justify-center transition-all delay-100 ease-in-out`}
            >
              <NavIcon icon={faUserGroup} title="Contacts" link="/contacts" />
              <NavIcon
                icon={faUserPlus}
                title="Add Contact"
                link="/contact/new"
              />
              <NavIcon icon={faPowerOff} title="Logout" isLogout={true} />
            </div>
            <div className="flex h-full flex-col overflow-scroll rounded-br-lg bg-gray-100 md:overflow-hidden md:p-6">
              {children}
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
