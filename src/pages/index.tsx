import Head from "next/head";
// import Link from "next/link";
// import { SignOutButton } from "@clerk/nextjs";
import { type NextPage } from "next";
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table";
import { DateTime } from "luxon";

import { api } from "~/utils/api";

type Highlight = {
  highlight: string;
};

type Interaction = {
  title: string;
  location: string;
  date: Date;
  Highlights: Highlight[];
};

type Contact = {
  name: string;
  affiliation: string;
  notes: string;
  position: string;
  company: string;
  Interactions: Interaction[];
};

const columnHelper = createColumnHelper<Contact>();

const columns = [
  columnHelper.accessor("name", {
    header: () => "Name",
    cell: (info) => info.getValue(),
    size: 120,
    maxSize: 150,
  }),
  columnHelper.accessor("affiliation", {
    header: () => "Affiliation",
    cell: (info) => info.renderValue(),
  }),
  columnHelper.accessor("position", {
    header: () => "Position",
    cell: (info) => info.renderValue(),
  }),
  columnHelper.accessor("company", {
    header: () => "Company",
    cell: (info) => info.renderValue(),
  }),
  columnHelper.accessor("notes", {
    header: "Notes",
    cell: (info) => {
      const val = info.getValue() as string;
      const maxLength = 35;
      const truncatedVal =
        val && val.length > maxLength
          ? val.substring(0, maxLength) + "..."
          : val;
      return truncatedVal;
    },
  }),
  columnHelper.accessor("Interactions", {
    header: () => "Recent Activity",
    cell: (info) => {
      const interactions = info.getValue() as Interaction[];
      if (interactions.length === 0) {
        return ""; // Handle case when there are no interactions
      }

      const sorted = interactions.sort(
        (a, b) => b.date.getTime() - a.date.getTime(),
      );
      const recent = sorted[0];
      return recent?.title;
    },
  }),
  columnHelper.accessor("Interactions", {
    header: () => "Activity Date",
    cell: (info) => {
      const interactions = info.getValue() as Interaction[];
      if (interactions.length === 0) {
        return ""; // Handle case when there are no interactions
      }

      const sorted = interactions.sort(
        (a, b) => b.date.getTime() - a.date.getTime(),
      );
      const recent = sorted[0];
      const convertedDate = DateTime.fromJSDate(
        recent?.date || new Date(),
      ).toFormat("MMMM dd, yyyy");
      return `${convertedDate}`;
    },
  }),
];

const Home: NextPage = () => {
  const { data, isLoading } = api.contacts.getAll.useQuery();
  // console.log(data, defaultData);
  const table = useReactTable({
    data: data ?? [],
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  if (isLoading) return "Loading...";

  if (!data || !table) return "No data available";

  return (
    <>
      <Head>
        <title>Network Buddy</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        {/* <SignOutButton /> */}
        <table className="w-11/12 bg-white">
          <thead className="">
            {table.getHeaderGroups().map((headerGroup, i) => (
              <tr key={headerGroup.id + i}>
                {headerGroup.headers.map((header, i) => (
                  <th
                    key={header.id + i}
                    className="border-2 bg-red-300 text-left"
                  >
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext(),
                        )}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody>
            {table.getRowModel().rows.map((row, i) => (
              <tr key={row.id + i}>
                {row.getVisibleCells().map((cell, i) => (
                  <td
                    key={cell.id + i}
                    style={{ width: cell.column.getSize() }}
                  >
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </main>
    </>
  );
};

export default Home;
